#version 330 core

// Input vertex data, different for all executions of this shader.
// Notice that the "0" here equals the "0" in glVertexAttribPointer
layout(location = 0) in vec3 vertexPosition_modelspace;
// Notice that the "1" here equals the "1" in glVertexAttribPointer
//layout(location = 1) in vec3 vertexColor;
layout(location = 1) in vec2 vertexUV;

//out vec3 fragmentColor;
out vec2 UV;   //把UV传给片段着色器
//外部常量
uniform mat4 MVP;

void main(){
	gl_Position = MVP * vec4(vertexPosition_modelspace,1);
	//fragmentColor = vertexColor;
	UV = vertexUV;
}